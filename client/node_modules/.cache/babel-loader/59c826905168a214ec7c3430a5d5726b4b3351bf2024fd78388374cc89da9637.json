{"ast":null,"code":"import api from '../utils/api';\nimport { setAlert } from './alert';\nimport { REGISTER_SUCCESS, REGISTER_FAIL, USER_LOADED, AUTH_ERROR, LOGIN_SUCCESS, LOGIN_FAIL, LOGOUT } from './types';\n\n// Load User\nexport const loadUser = () => async dispatch => {\n  try {\n    const res = await api.get('/auth');\n    dispatch({\n      type: USER_LOADED,\n      payload: res.data\n    });\n  } catch (err) {\n    dispatch({\n      type: AUTH_ERROR\n    });\n  }\n};\n\n// Register User\nexport const register = ({\n  name,\n  email,\n  githubusername,\n  password\n}) => async dispatch => {\n  const body = {\n    name,\n    email,\n    githubusername,\n    password\n  };\n  try {\n    const res = await api.post('/users', body);\n    dispatch({\n      type: REGISTER_SUCCESS,\n      payload: res.data\n    });\n    dispatch(loadUser());\n  } catch (err) {\n    const errors = err.response.data.errors;\n    if (errors) {\n      errors.forEach(error => dispatch(setAlert(error.msg, 'danger')));\n    }\n    dispatch({\n      type: REGISTER_FAIL\n    });\n  }\n};\n\n// Login User\nexport const login = (email, password) => async dispatch => {\n  const body = {\n    email,\n    password\n  };\n  try {\n    const res = await api.post('/auth', body);\n    dispatch({\n      type: LOGIN_SUCCESS,\n      payload: res.data\n    });\n    dispatch(loadUser());\n  } catch (err) {\n    const errors = err.response.data.errors;\n    if (errors) {\n      errors.forEach(error => dispatch(setAlert(error.msg, 'danger')));\n    }\n    dispatch({\n      type: LOGIN_FAIL\n    });\n  }\n};\n\n// Logout/Clear Profile\nexport const logout = () => dispatch => {\n  dispatch({\n    type: LOGOUT\n  });\n};","map":{"version":3,"names":["api","setAlert","REGISTER_SUCCESS","REGISTER_FAIL","USER_LOADED","AUTH_ERROR","LOGIN_SUCCESS","LOGIN_FAIL","LOGOUT","loadUser","dispatch","res","get","type","payload","data","err","register","name","email","githubusername","password","body","post","errors","response","forEach","error","msg","login","logout"],"sources":["E:/dev book/dev-book/client/src/actions/auth.js"],"sourcesContent":["import api from '../utils/api';\r\nimport { setAlert } from './alert';\r\nimport {\r\n  REGISTER_SUCCESS,\r\n  REGISTER_FAIL,\r\n  USER_LOADED,\r\n  AUTH_ERROR,\r\n  LOGIN_SUCCESS,\r\n  LOGIN_FAIL,\r\n  LOGOUT,\r\n} from './types';\r\n\r\n// Load User\r\nexport const loadUser = () => async (dispatch) => {\r\n  try {\r\n    const res = await api.get('/auth');\r\n\r\n    dispatch({\r\n      type: USER_LOADED,\r\n      payload: res.data,\r\n    });\r\n  } catch (err) {\r\n    dispatch({ type: AUTH_ERROR });\r\n  }\r\n};\r\n\r\n// Register User\r\nexport const register =\r\n  ({ name, email, githubusername, password }) =>\r\n  async (dispatch) => {\r\n    const body = { name, email, githubusername, password };\r\n\r\n    try {\r\n      const res = await api.post('/users', body);\r\n\r\n      dispatch({\r\n        type: REGISTER_SUCCESS,\r\n        payload: res.data,\r\n      });\r\n\r\n      dispatch(loadUser());\r\n    } catch (err) {\r\n      const errors = err.response.data.errors;\r\n      if (errors) {\r\n        errors.forEach((error) => dispatch(setAlert(error.msg, 'danger')));\r\n      }\r\n\r\n      dispatch({ type: REGISTER_FAIL });\r\n    }\r\n  };\r\n\r\n// Login User\r\nexport const login = (email, password) => async (dispatch) => {\r\n  const body = { email, password };\r\n\r\n  try {\r\n    const res = await api.post('/auth', body);\r\n\r\n    dispatch({\r\n      type: LOGIN_SUCCESS,\r\n      payload: res.data,\r\n    });\r\n\r\n    dispatch(loadUser());\r\n  } catch (err) {\r\n    const errors = err.response.data.errors;\r\n    if (errors) {\r\n      errors.forEach((error) => dispatch(setAlert(error.msg, 'danger')));\r\n    }\r\n\r\n    dispatch({ type: LOGIN_FAIL });\r\n  }\r\n};\r\n\r\n// Logout/Clear Profile\r\nexport const logout = () => (dispatch) => {\r\n  dispatch({ type: LOGOUT });\r\n};\r\n"],"mappings":"AAAA,OAAOA,GAAG,MAAM,cAAc;AAC9B,SAASC,QAAQ,QAAQ,SAAS;AAClC,SACEC,gBAAgB,EAChBC,aAAa,EACbC,WAAW,EACXC,UAAU,EACVC,aAAa,EACbC,UAAU,EACVC,MAAM,QACD,SAAS;;AAEhB;AACA,OAAO,MAAMC,QAAQ,GAAGA,CAAA,KAAM,MAAOC,QAAQ,IAAK;EAChD,IAAI;IACF,MAAMC,GAAG,GAAG,MAAMX,GAAG,CAACY,GAAG,CAAC,OAAO,CAAC;IAElCF,QAAQ,CAAC;MACPG,IAAI,EAAET,WAAW;MACjBU,OAAO,EAAEH,GAAG,CAACI;IACf,CAAC,CAAC;EACJ,CAAC,CAAC,OAAOC,GAAG,EAAE;IACZN,QAAQ,CAAC;MAAEG,IAAI,EAAER;IAAW,CAAC,CAAC;EAChC;AACF,CAAC;;AAED;AACA,OAAO,MAAMY,QAAQ,GACnBA,CAAC;EAAEC,IAAI;EAAEC,KAAK;EAAEC,cAAc;EAAEC;AAAS,CAAC,KAC1C,MAAOX,QAAQ,IAAK;EAClB,MAAMY,IAAI,GAAG;IAAEJ,IAAI;IAAEC,KAAK;IAAEC,cAAc;IAAEC;EAAS,CAAC;EAEtD,IAAI;IACF,MAAMV,GAAG,GAAG,MAAMX,GAAG,CAACuB,IAAI,CAAC,QAAQ,EAAED,IAAI,CAAC;IAE1CZ,QAAQ,CAAC;MACPG,IAAI,EAAEX,gBAAgB;MACtBY,OAAO,EAAEH,GAAG,CAACI;IACf,CAAC,CAAC;IAEFL,QAAQ,CAACD,QAAQ,CAAC,CAAC,CAAC;EACtB,CAAC,CAAC,OAAOO,GAAG,EAAE;IACZ,MAAMQ,MAAM,GAAGR,GAAG,CAACS,QAAQ,CAACV,IAAI,CAACS,MAAM;IACvC,IAAIA,MAAM,EAAE;MACVA,MAAM,CAACE,OAAO,CAAEC,KAAK,IAAKjB,QAAQ,CAACT,QAAQ,CAAC0B,KAAK,CAACC,GAAG,EAAE,QAAQ,CAAC,CAAC,CAAC;IACpE;IAEAlB,QAAQ,CAAC;MAAEG,IAAI,EAAEV;IAAc,CAAC,CAAC;EACnC;AACF,CAAC;;AAEH;AACA,OAAO,MAAM0B,KAAK,GAAGA,CAACV,KAAK,EAAEE,QAAQ,KAAK,MAAOX,QAAQ,IAAK;EAC5D,MAAMY,IAAI,GAAG;IAAEH,KAAK;IAAEE;EAAS,CAAC;EAEhC,IAAI;IACF,MAAMV,GAAG,GAAG,MAAMX,GAAG,CAACuB,IAAI,CAAC,OAAO,EAAED,IAAI,CAAC;IAEzCZ,QAAQ,CAAC;MACPG,IAAI,EAAEP,aAAa;MACnBQ,OAAO,EAAEH,GAAG,CAACI;IACf,CAAC,CAAC;IAEFL,QAAQ,CAACD,QAAQ,CAAC,CAAC,CAAC;EACtB,CAAC,CAAC,OAAOO,GAAG,EAAE;IACZ,MAAMQ,MAAM,GAAGR,GAAG,CAACS,QAAQ,CAACV,IAAI,CAACS,MAAM;IACvC,IAAIA,MAAM,EAAE;MACVA,MAAM,CAACE,OAAO,CAAEC,KAAK,IAAKjB,QAAQ,CAACT,QAAQ,CAAC0B,KAAK,CAACC,GAAG,EAAE,QAAQ,CAAC,CAAC,CAAC;IACpE;IAEAlB,QAAQ,CAAC;MAAEG,IAAI,EAAEN;IAAW,CAAC,CAAC;EAChC;AACF,CAAC;;AAED;AACA,OAAO,MAAMuB,MAAM,GAAGA,CAAA,KAAOpB,QAAQ,IAAK;EACxCA,QAAQ,CAAC;IAAEG,IAAI,EAAEL;EAAO,CAAC,CAAC;AAC5B,CAAC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}